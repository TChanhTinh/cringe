--- dwmblocks.c
+++ dwmblocks.c
@@ -33,32 +32,15 @@ static int screen;
 static Window root;
 static char statusbar[LENGTH(blocks)][CMDLENGTH] = {0};
 static char statusstr[2][256];
-static char button[] = "\0";
 static int statusContinue = 1;
 static void (*writestatus) () = setroot;
 
 //opens process *cmd and stores output in *output
 void getcmd(const Block *block, char *output)
 {
-	if (block->signal)
-	{
-		output[0] = block->signal;
-		output++;
-	}
 	strcpy(output, block->icon);
 	char *cmd = block->command;
-	FILE *cmdf;
-	if (*button)
-	{
-		setenv("BUTTON", button, 1);
-		cmdf = popen(cmd,"r");
-		*button = '\0';
-		unsetenv("BUTTON");
-	}
-	else
-	{
-		cmdf = popen(cmd,"r");
-	}
+	FILE *cmdf = popen(cmd,"r");
 	if (!cmdf)
 		return;
 	char c;
@@ -96,18 +78,12 @@ void getsigcmds(int signal)
 
 void setupsignals()
 {
-	struct sigaction sa;
 	for(int i = 0; i < LENGTH(blocks); i++)
 	{	  
 		if (blocks[i].signal > 0)
-		{
 			signal(SIGRTMIN+blocks[i].signal, sighandler);
-			sigaddset(&sa.sa_mask, SIGRTMIN+blocks[i].signal); // ignore signal when handling SIGUSR1
-		}
 	}
-	sa.sa_sigaction = buttonhandler;
-	sa.sa_flags = SA_SIGINFO;
-	sigaction(SIGUSR1, &sa, NULL);
+
 }
 #endif
 
@@ -166,13 +142,6 @@ void sighandler(int signum)
 	getsigcmds(signum-SIGRTMIN);
 	writestatus();
 }
-
-void buttonhandler(int sig, siginfo_t *si, void *ucontext)
-{
-	*button = '0' + si->si_value.sival_int & 0xff;
-	getsigcmds(si->si_value.sival_int >> 8);
-	writestatus();
-}
 #endif
 
 void termhandler(int signum)
