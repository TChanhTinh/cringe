[["%",{"text":"index.js","registerMode":0}],["\"",{"text":"#include \"/home/tchanhtinh/.cache/wal/colors-wal-dwm.h\"\nv","registerMode":1}],["/",{"text":"updatewmhints","registerMode":0}],["1",{"text":"#include \"/home/tchanhtinh/.cache/wal/colors-wal-dwm.h\"\nv","registerMode":1}],["2",{"text":"*static const char col_gray1[]       = \"#3B4252\";\nstatic const char col_gray2[]       = \"#434C5E\";\nstatic const char col_gray3[]       = \"#E6BAFF\";\nstatic const char col_gray4[]       = \"#F9F9F9\";\nstatic const char col_cyan[]        = \"#FA5AA4\";\nstatic const char *colors[][3]      = {\n\t/*               fg         bg         border   */\n/*\t[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },\n\t[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },\n\t[SchemeHid]  = { col_cyan,  col_gray1, col_cyan  },\n};*/","registerMode":1}],["3",{"text":",\n\t{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },\n\t{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },","registerMode":1}],["4",{"text":"\t\tc->isurgent = (wmh->flags & XUrgencyHint) ? 1 : 0;\n","registerMode":1}],["-",{"text":"/","registerMode":1}],["5",{"text":"/* See LICENSE file for copyright and license details. */\n\n/* appearance */\nstatic const unsigned int borderpx = 1; /* border pixel of windows */\nstatic const unsigned int gappx = 10;\t/* gap pixel between windows */\nstatic const unsigned int snap = 32;\t/* snap pixel */\nstatic const unsigned int minwsz = 0;\nstatic const int showbar = 1;\t   /* 0 means no bar */\nstatic const int topbar = 1;\t   /* 0 means bottom bar */\nstatic const int horizpadbar = -7; /* horizontal padding for statusbar */\nstatic const int vertpadbar = 7;   /* vertical padding for statusbar */\nstatic const char *fonts[] = {\"Font Awesome 5 Free:size=13\", \"Font Awesome 5 Free:size=11\"};\nstatic const char dmenufont[] = \"Font Awesome 5 Free:size=13\";\nstatic const char col_gray1[] = \"#3B4252\";\nstatic const char col_gray2[] = \"#434C5E\";\nstatic const char col_gray3[] = \"#E6BAFF\";\nstatic const char col_gray4[] = \"#F9F9F9\";\nstatic const char col_cyan[] = \"#FA5AA4\";\nstatic const char *colors[][3] = {\n\t/*               fg         bg         border   */\n\t[SchemeNorm] = {col_gray4, col_gray1, col_gray2},\n\t[SchemeSel] = {col_gray4, col_cyan, col_cyan},\n\t[SchemeHid] = {col_cyan, col_gray1, col_cyan},\n};\n\n/* tagging */\nstatic const char *tags[] = {\"₁\", \"₂\", \"₃\", \"₄\", \"₅\"};\n\nstatic const Rule rules[] = {\n\t/* xprop(1):\n\t *\tWM_CLASS(STRING) = instance, class\n\t *\tWM_NAME(STRING) = title\n\t */\n\t/* class      instance    title       tags mask     isfloating   monitor */\n\t{\"Gimp\", NULL, NULL, 0, 1, -1},\n\t{\"Firefox\", NULL, NULL, 1 << 8, 0, -1},\n};\n\n/* layout(s) */\nstatic const float mfact = 0.50; /* factor of master area size [0.05..0.95] */\nstatic const float smfact = 0.00;\nstatic const int nmaster = 1;\t  /* number of clients in master area */\nstatic const int resizehints = 0; /* 1 means respect size hints in tiled resizals */\n\nstatic const Layout layouts[] = {\n\t/* symbol     arrange function */\n\t{\"ₖ\", tile}, /* first entry is default */\n\t{\"ₙ\", NULL}, /* no layout function means floating behavior */\n\t{\"ₘ\", monocle},\n};\n\n/* key definitions */\n#define MODKEY Mod4Mask\n#define TAGKEYS(KEY, TAG)                                          \\\n\t{MODKEY, KEY, view, {.ui = 1 << TAG}},                         \\\n\t\t{MODKEY | ControlMask, KEY, toggleview, {.ui = 1 << TAG}}, \\\n\t\t{MODKEY | ShiftMask, KEY, tag, {.ui = 1 << TAG}},          \\\n\t\t{MODKEY | ControlMask | ShiftMask, KEY, toggletag, {.ui = 1 << TAG}},\n\n/* helper for spawning shell commands in the pre dwm-5.0 fashion */\n#define SHCMD(cmd)                                           \\\n\t{                                                        \\\n\t\t.v = (const char *[]) { \"/bin/sh\", \"-c\", cmd, NULL } \\\n\t}\n\n/* commands */\nstatic char dmenumon[2] = \"0\"; /* component of dmenucmd, manipulated in spawn() */\nstatic const char *dmenucmd[] = {\"bash\", \"-c\", \"$HOME/.config/rofi/scripts/appsmenu.sh\", NULL};\nstatic const char *volupcmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/notify/change-volume.sh up\", NULL};\nstatic const char *voldowncmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/notify/change-volume.sh down\", NULL};\nstatic const char *volmutecmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/notify/change-volume.sh mute\", NULL};\nstatic const char *brightupcmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/notify/change-brightness.sh up\", NULL};\nstatic const char *brightdowncmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/notify/change-brightness.sh down\", NULL};\nstatic const char *playernextcmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/music-controller next\", NULL};\nstatic const char *playerprevcmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/music-controller prev\", NULL};\nstatic const char *playerstopcmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/music-controller stop\", NULL};\nstatic const char *playertogglecmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/music-controller toggle\", NULL};\nstatic const char *screenshotcmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/shot-now\", NULL};\nstatic const char *screenshotdrwcmd[] = {\"bash\", \"-c\", \"$HOME/.dwm/scripts/shot-seldraw\", NULL};\nstatic const char *termcmd[] = {\"termite\", NULL};\nstatic const char *filecmd[] = {\"thunar\", NULL};\n\n#include <X11/XF86keysym.h>\nstatic Key keys[] = {\n\t/* modifier                     key        function        argument */\n\t{0, XF86XK_AudioRaiseVolume, spawn, {.v = volupcmd}},\n\t{0, XF86XK_AudioLowerVolume, spawn, {.v = voldowncmd}},\n\t{0, XF86XK_AudioMute, spawn, {.v = volmutecmd}},\n\n\t{0, XK_Print, spawn, {.v = screenshotcmd}},\n\t{ShiftMask, XK_Print, spawn, {.v = screenshotdrwcmd}},\n\n\t{0, XF86XK_AudioNext, spawn, {.v = playernextcmd}},\n\t{0, XF86XK_AudioPrev, spawn, {.v = playerprevcmd}},\n\t{0, XF86XK_AudioPlay, spawn, {.v = playertogglecmd}},\n\t{0, XF86XK_AudioStop, spawn, {.v = playerstopcmd}},\n\n\t{0, XF86XK_MonBrightnessUp, spawn, {.v = brightupcmd}},\n\t{0, XF86XK_MonBrightnessDown, spawn, {.v = brightdowncmd}},\n\n\t{MODKEY, XK_r, spawn, {.v = dmenucmd}},\n\t{MODKEY, XK_t, spawn, {.v = termcmd}},\n\t{MODKEY, XK_e, spawn, {.v = filecmd}},\n\t{MODKEY, XK_b, togglebar, {0}},\n\t{MODKEY, XK_d, focusstackvis, {.i = +1}},\n\t{MODKEY, XK_Tab, focusstackvis, {.i = +1}},\n\t{MODKEY, XK_a, focusstackvis, {.i = -1}},\n\t{MODKEY | ShiftMask, XK_Left, focusstackhid, {.i = +1}},\n\t{MODKEY | ShiftMask, XK_Right, focusstackhid, {.i = -1}},\n\t{MODKEY, XK_h, incnmaster, {.i = +1}},\n\t{MODKEY, XK_v, incnmaster, {.i = -1}},\n\t{MODKEY | ShiftMask, XK_a, setmfact, {.f = -0.05}},\n\t{MODKEY | ShiftMask, XK_d, setmfact, {.f = +0.05}},\n\t{MODKEY | ShiftMask, XK_s, setsmfact, {.f = -0.05}},\n\t{MODKEY | ShiftMask, XK_w, setsmfact, {.f = +0.05}},\n\t{MODKEY, XK_z, zoom, {0}},\n\t{MODKEY, XK_sacute, view, {0}},\n\t{MODKEY, XK_c, killclient, {0}},\n\t{MODKEY, XK_k, setlayout, {.v = &layouts[0]}},\n\t{MODKEY, XK_n, setlayout, {.v = &layouts[1]}},\n\t{MODKEY, XK_m, setlayout, {.v = &layouts[2]}},\n\t{MODKEY, XK_x, setlayout, {0}},\n\t{MODKEY | ShiftMask, XK_space, togglefloating, {0}},\n\t{MODKEY, XK_0, view, {.ui = ~0}},\n\t{MODKEY | ShiftMask, XK_0, tag, {.ui = ~0}},\n\t{MODKEY, XK_comma, focusmon, {.i = -1}},\n\t{MODKEY, XK_period, focusmon, {.i = +1}},\n\t{MODKEY | ShiftMask, XK_comma, tagmon, {.i = -1}},\n\t{MODKEY | ShiftMask, XK_period, tagmon, {.i = +1}},\n\t{MODKEY | ShiftMask, XK_s, show, {0}},\n\t{MODKEY | ShiftMask, XK_h, hide, {0}},\n\tTAGKEYS(XK_1, 0)\n\t\tTAGKEYS(XK_2, 1)\n\t\t\tTAGKEYS(XK_3, 2)\n\t\t\t\tTAGKEYS(XK_4, 3)\n\t\t\t\t\tTAGKEYS(XK_5, 4)\n\t\t\t\t\t\tTAGKEYS(XK_6, 5)\n\t\t\t\t\t\t\tTAGKEYS(XK_7, 6)\n\t\t\t\t\t\t\t\tTAGKEYS(XK_8, 7)\n\t\t\t\t\t\t\t\t\tTAGKEYS(XK_9, 8){MODKEY | ShiftMask, XK_q, quit, {0}},\n\t{MODKEY | ShiftMask, XK_r, quit, {1}},\n};\n\n/* button definitions */\n/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */\nstatic Button buttons[] = {\n\t/* click                event mask      button          function        argument */\n\t{ClkLtSymbol, 0, Button1, setlayout, {0}},\n\t{ClkLtSymbol, 0, Button3, setlayout, {.v = &layouts[2]}},\n\t{ClkWinTitle, 0, Button1, togglewin, {0}},\n\t{ClkWinTitle, 0, Button2, zoom, {0}},\n\t{ClkStatusText, 0, Button1, sigdwmblocks, {.i = 1}},\n\t{ClkStatusText, 0, Button2, sigdwmblocks, {.i = 2}},\n\t{ClkStatusText, 0, Button3, sigdwmblocks, {.i = 3}},\n\t{ClkClientWin, MODKEY, Button1, movemouse, {0}},\n\t{ClkClientWin, MODKEY, Button2, togglefloating, {0}},\n\t{ClkClientWin, MODKEY, Button3, resizemouse, {0}},\n\t{ClkTagBar, 0, Button1, view, {0}},\n\t{ClkTagBar, 0, Button3, toggleview, {0}},\n\t{ClkTagBar, MODKEY, Button1, tag, {0}},\n\t{ClkTagBar, MODKEY, Button3, toggletag, {0}},\n};\n","registerMode":1}],["6",{"text":"#VUE_APP_BASE_URL=/\n#VUE_APP_BASE_URL=https://secit-ctu.herokuapp.com/\n#VUE_APP_BASE_URL=http://115.75.158.50:9000/\n#VUE_APP_BASE_URL=http://localhost:9000/","registerMode":1}],["7",{"text":"const path = require(\"path\");\nconst XLSX = require(\"xlsx\");\nconst fs = require(\"fs\");\nconst { query } = require(\"winston\");\nconst {\n  categoryTranslator,\n  getPostImage,\n  getPostAllImage,\n  removeVietnameseTones,\n  sortLecturer,\n} = require(\"./apiCommon\");\nconst {\n  uploadImageLogic,\n  deleteImage,\n  fetchLocalizationData,\n  insertLocalizationData,\n  fetchData,\n  updateData,\n} = require(\"./apiLogic\");\n//const cptable = require('codepage');\n\nfunction getViewPath(file) {\n  return path.join(__dirname, \"../../views/\" + file);\n}\n\nmodule.exports = {\n  renderLogin: (req, res) => {\n    res.render(getViewPath(\"login\"));\n  },\n\n  renderPanel: (req, res) => {\n    if (req.isAuthenticated())\n      res.render(getViewPath(\"panel\"), { feature: \"editor\" });\n    else res.redirect(\"/login\");\n  },\n\n  renderRegister: (req, res) => {\n    if (req.isAuthenticated())\n      res.render(getViewPath(\"panel\"), { feature: \"register\" });\n    else res.redirect(\"/login\");\n  },\n\n  renderEditor: (req, res) => {\n    if (req.isAuthenticated())\n      res.render(getViewPath(\"panel\"), { feature: \"editor\" });\n    else res.redirect(\"/login\");\n  },\n\n  renderManagingLeturer: (req, res) => {\n    if (req.isAuthenticated())\n      res.render(getViewPath(\"panel\"), { feature: \"leturer-manager\" });\n    else res.redirect(\"/login\");\n  },\n\n  renderHomePage: (req, res) => {\n    res.render(path.join(__dirname), \"../../appVue/index.html\");\n  },\n\n  renderDeleteData: (req, res) => {\n    if (req.isAuthenticated())\n      res.render(getViewPath(\"panel\"), { feature: \"delete-data\" });\n    else res.redirect(\"/login\");\n  },\n\n  handleUploadFile: async (req, res) => {\n    const imgSrc = await uploadImageLogic(req.body);\n    res.send(imgSrc);\n  },\n\n  handleDeleteAvatar: async (req, res) => {\n    const id = await req.params.id;\n    const query = {\n      action: \"SELECT * FROM\",\n      table: \"lecturer\",\n      locales: [\"\", \"_en\"],\n      condition: \"WHERE id=$1\",\n      params: [id],\n    };\n    const data = await fetchLocalizationData(query);\n    deleteImage(data.vi[0].picture);\n    res.send(\"Success!\");\n  },\n\n  handleDeletePostImage: async (req, res) => {\n    const id = await req.params.id;\n    const query = {\n      action: \"SELECT * FROM\",\n      table: \"POST\",\n      locales: [\"\", \"_en\"],\n      condition: \"WHERE id=$1\",\n      params: [id],\n    };\n    const data = await fetchLocalizationData(query);\n    const image = [getPostAllImage(data.en[0]), getPostAllImage(data.vi[0])];\n    image.map((mapData) => {\n      if (mapData.length > 0) {\n        mapData.map((mappedImage) => deleteImage(mappedImage));\n      }\n    });\n    res.send(\"Success!\");\n  },\n\n  fetchDataTable: async (req, res) => {\n    const table = await req.params.table;\n    const query = {\n      action: \"SELECT * FROM\",\n      table: table,\n    };\n    const data = await fetchData(query);\n    res.send(data);\n  },\n\n  deleteDataTable: async (req, res) => {\n    const table = await req.params.table;\n    const id = req.params.id;\n    if (table === \"admin\" && parseInt(id) === parseInt(req.user.id)) {\n      res.send(\"Không thể xóa tài khoản đang đăng nhập!\");\n    } else {\n      const query = {\n        action: \"DELETE FROM\",\n        table: table,\n        condition: \"WHERE id = $1\",\n        params: [id],\n      };\n      const data = await updateData(query);\n      res.send(\"Xóa thành công!\");\n    }\n  },\n\n  fetchPostsByCategory: async (req, res) => {\n    const query = {\n      action: \"SELECT * FROM\",\n      table: \"POST\",\n      locales: [\"\", \"_en\"],\n      condition: \"WHERE type=$1\",\n      params: [req.params.category],\n    };\n    const data = await fetchLocalizationData(query);\n    var refinedData = data;\n    /*Object.keys(data).forEach(async key => {\n            refinedData[key] = await Promise.all(\n                data[key].map(async mapData => (Object.assign(mapData, { \"thumbnail\": getPostImage(mapData.detail) }))),\n            )\n        })*/\n    res.send(data);\n  },\n\n  fetchNews: async (req, res) => {\n    const postNum = req.query.startFrom === undefined ? 0 : req.query.startFrom;\n    const query = {\n      action: \"SELECT * FROM\",\n      table: \"POST\",\n      locales: [\"\", \"_en\"],\n      condition: \"WHERE type=$1 ORDER BY date DESC LIMIT 10\",\n      params: [\"news\"],\n    };\n    const data = await fetchLocalizationData(query);\n    //This add thumbnail into postData\n    var refinedData = data;\n    Object.keys(data).forEach(async (key) => {\n      refinedData[key] = await Promise.all(\n        data[key].map(async (mapData) =>\n          Object.assign(mapData, { thumbnail: getPostImage(mapData.detail) })\n        )\n      );\n    });\n    res.send(refinedData);\n  },\n\n  fetchPostsById: async (req, res) => {\n    const postId = req.params.id;\n    const query = {\n      action: \"SELECT * FROM\",\n      table: \"POST\",\n      locales: [\"\", \"_en\"],\n      condition: \"WHERE id=$1\",\n      params: [postId],\n    };\n    const data = await fetchLocalizationData(query);\n    res.send(data);\n  },\n\n  fetchLecturers: async (req, res) => {\n    const query = {\n      action: \"SELECT * FROM\",\n      table: \"LECTURER\",\n      locales: [\"\", \"_en\"],\n      condition: \"ORDER BY id ASC\",\n      params: [],\n    };\n    const data = await fetchLocalizationData(query);\n    data.vi = await sortLecturer(data.vi);\n    data.en = await sortLecturer(data.en);\n    res.send(data);\n  },\n\n  fetchLecturersById: async (req, res) => {\n    const id = req.params.id;\n    const query = {\n      action: \"SELECT * FROM\",\n      table: \"lecturer\",\n      locales: [\"\", \"_en\"],\n      condition: \"WHERE id=$1\",\n      params: [id],\n    };\n    const data = await fetchLocalizationData(query);\n    res.send(data);\n  },\n\n  insertLecturer: async (req, res) => {\n    const lecturer = req.body;\n    const viParams = [\n      lecturer.id,\n      lecturer.name,\n      lecturer.picture,\n      lecturer.address,\n      lecturer.position,\n      lecturer.academic_title,\n      lecturer.email,\n      lecturer.description,\n    ];\n\n    const enParams = [\n      lecturer.id,\n      removeVietnameseTones(lecturer.name),\n      lecturer.picture,\n      removeVietnameseTones(lecturer.address),\n      lecturer.position_en,\n      lecturer.academic_title_en,\n      lecturer.email,\n      lecturer.description_en,\n    ];\n\n    const query = {\n      action: \"INSERT INTO\",\n      table: \"LECTURER\",\n      locales: [\"\", \"_en\"],\n      condition:\n        \"(id, name, picture, address, position, academic_title, email, description)\" +\n        \" VALUES($1, $2, $3, $4, $5, $6, $7, $8)\",\n      params: { \"\": viParams, _en: enParams },\n    };\n    const data = await insertLocalizationData(query);\n    res.send(\"Thêm thành công!\");\n  },\n\n  patchLecturer: async (req, res) => {\n    const lecturer = req.body;\n    const viParams = [\n      lecturer.id,\n      lecturer.name,\n      lecturer.picture,\n      lecturer.address,\n      lecturer.position,\n      lecturer.academic_title,\n      lecturer.email,\n      lecturer.description,\n    ];\n\n    const enParams = [\n      lecturer.id,\n      removeVietnameseTones(lecturer.name),\n      lecturer.picture,\n      removeVietnameseTones(lecturer.address),\n      lecturer.position_en,\n      lecturer.academic_title_en,\n      lecturer.email,\n      lecturer.description_en,\n    ];\n\n    const query = {\n      action: \"UPDATE\",\n      table: \"LECTURER\",\n      locales: [\"\", \"_en\"],\n      condition:\n        \"SET name = $2, picture = $3, address = $4, position = $5, academic_title = $6, email = $7, description = $8\" +\n        \" WHERE id = $1\",\n      params: { \"\": viParams, _en: enParams },\n    };\n    const data = await insertLocalizationData(query);\n    res.send(\"Sửa thành công!\");\n  },\n\n  patchPost: async (req, res) => {\n    const postData = req.body;\n    const postId = postData.id;\n    const postType = postData.type;\n\n    const postVi = postData.vi;\n    const viParams = [postId, postVi.title, postVi.body];\n    const postEn = postData.en;\n    const enParams = [postId, postEn.title, postEn.body];\n\n    const query = {\n      action: \"UPDATE\",\n      table: \"POST\",\n      locales: [\"\", \"_en\"],\n      condition: \"SET title = $2, detail = $3\" + \" WHERE id = $1\",\n      params: { \"\": viParams, _en: enParams },\n    };\n    const data = await insertLocalizationData(query);\n    res.send(\"Sửa thành công!\");\n  },\n\n  insertPost: async (req, res) => {\n    const postData = req.body;\n    const postType = postData.type;\n\n    const postVi = postData.vi;\n    const viParams = [postVi.title, postVi.body, postType];\n    const postEn = postData.en;\n    const enParams = [postEn.title, postEn.body, postType];\n\n    const query = {\n      action: \"INSERT INTO\",\n      table: \"POST\",\n      locales: [\"\", \"_en\"],\n      condition:\n        \"(title, detail, type, date)\" + \" VALUES($1, $2, $3, CURRENT_DATE)\",\n      params: { \"\": viParams, _en: enParams },\n    };\n    //console.log(query);\n    const data = await insertLocalizationData(query);\n    res.send(\"Thêm thành công!\");\n  },\n\n  getSheet: async (req, res) => {\n    const sheet = req.params.sheet;\n    const name = req.params.name;\n    var buf = await fs.readFileSync(\n      path.join(__dirname, `../../public/spreadsheet/${sheet}.xlsx`)\n    );\n    var wb = await XLSX.read(buf, { type: \"array\", codepage: 1258 });\n    var i = 2;\n    while (wb.Sheets[name][`A${i}`] instanceof Object) {\n      if (wb.Sheets[name][`F${i}`] !== undefined) {\n        wb.Sheets[name][`F${i}`].h =\n          '<a href=\"' + wb.Sheets[name][`F${i}`].h + '\">Link</a>';\n      }\n      i++;\n    }\n    var htmlstr = await XLSX.write(wb, {\n      sheet: `${name}`,\n      codepage: 1258,\n      type: \"string\",\n      bookType: \"html\",\n    });\n    console.log();\n    res.send(htmlstr);\n  },    \n};","registerMode":2}],["8",{"text":"/*Object.keys(data).forEach(async key => {\n            refinedData[key] = await Promise.all(\n                data[key].map(async mapData => (Object.assign(mapData, { \"thumbnail\": getPostImage(mapData.detail) }))),\n            )\n        })","registerMode":1}],["0",{"text":"while (wb.Sheets[name][`A${i}`] instanceof Object) {\n      if (wb.Sheets[name][`F${i}`] !== undefined) {\n        wb.Sheets[name][`F${i}`].h =\n          '<a href=\"' + wb.Sheets[name][`F${i}`].h + '\">Link</a>';\n      }\n      i++;\n    ","registerMode":1}],["9",{"text":"{\n        const query = {\n            action: \"SELECT * FROM\",\n            table: \"POST\",\n            locales: [\"\", \"_en\"],\n            condition: \"WHERE type=$1\",\n            params: [req.params.category]\n        }\n        const data = await fetchLocalizationData(query);\n        var refinedData = data;\n        /*Object.keys(data).forEach(async key => {\n            refinedData[key] = await Promise.all(\n                data[key].map(async mapData => (Object.assign(mapData, { \"thumbnail\": getPostImage(mapData.detail) }))),\n            )\n        })*/\n        res.send(data)\n    }","registerMode":1}]]