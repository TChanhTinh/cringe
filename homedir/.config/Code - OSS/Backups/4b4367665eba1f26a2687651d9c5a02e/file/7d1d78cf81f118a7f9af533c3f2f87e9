file:///home/tchanhtinh/Projects/cit/server/app/admin/index.js {"mtime":1614931989106,"ctime":1614925641248,"size":9618,"etag":"36hsa4fq5a08","orphaned":false}
const path = require("path");
const XLSX = require("xlsx");
const fs = require("fs");
const { query } = require("winston");
const {
  categoryTranslator,
  getPostImage,
  getPostAllImage,
  removeVietnameseTones,
  sortLecturer,
} = require("./apiCommon");
const {
  uploadImageLogic,
  deleteImage,
  fetchLocalizationData,
  insertLocalizationData,
  fetchData,
  updateData,
} = require("./apiLogic");
//const cptable = require('codepage');

function getViewPath(file) {
  return path.join(__dirname, "../../views/" + file);
}

module.exports = {
  renderLogin: (req, res) => {
    res.render(getViewPath("login"));
  },

  renderPanel: (req, res) => {
    if (req.isAuthenticated())
      res.render(getViewPath("panel"), { feature: "editor" });
    else res.redirect("/login");
  },

  renderRegister: (req, res) => {
    if (req.isAuthenticated())
      res.render(getViewPath("panel"), { feature: "register" });
    else res.redirect("/login");
  },

  renderEditor: (req, res) => {
    if (req.isAuthenticated())
      res.render(getViewPath("panel"), { feature: "editor" });
    else res.redirect("/login");
  },

  renderManagingLeturer: (req, res) => {
    if (req.isAuthenticated())
      res.render(getViewPath("panel"), { feature: "leturer-manager" });
    else res.redirect("/login");
  },

  renderHomePage: (req, res) => {
    res.render(path.join(__dirname), "../../appVue/index.html");
  },

  renderDeleteData: (req, res) => {
    if (req.isAuthenticated())
      res.render(getViewPath("panel"), { feature: "delete-data" });
    else res.redirect("/login");
  },

  handleUploadFile: async (req, res) => {
    const imgSrc = await uploadImageLogic(req.body);
    res.send(imgSrc);
  },

  handleDeleteAvatar: async (req, res) => {
    const id = await req.params.id;
    const query = {
      action: "SELECT * FROM",
      table: "lecturer",
      locales: ["", "_en"],
      condition: "WHERE id=$1",
      params: [id],
    };
    const data = await fetchLocalizationData(query);
    deleteImage(data.vi[0].picture);
    res.send("Success!");
  },

  handleDeletePostImage: async (req, res) => {
    const id = await req.params.id;
    const query = {
      action: "SELECT * FROM",
      table: "POST",
      locales: ["", "_en"],
      condition: "WHERE id=$1",
      params: [id],
    };
    const data = await fetchLocalizationData(query);
    const image = [getPostAllImage(data.en[0]), getPostAllImage(data.vi[0])];
    image.map((mapData) => {
      if (mapData.length > 0) {
        mapData.map((mappedImage) => deleteImage(mappedImage));
      }
    });
    res.send("Success!");
  },

  fetchDataTable: async (req, res) => {
    const table = await req.params.table;
    const query = {
      action: "SELECT * FROM",
      table: table,
    };
    const data = await fetchData(query);
    res.send(data);
  },

  deleteDataTable: async (req, res) => {
    const table = await req.params.table;
    const id = req.params.id;
    if (table === "admin" && parseInt(id) === parseInt(req.user.id)) {
      res.send("Không thể xóa tài khoản đang đăng nhập!");
    } else {
      const query = {
        action: "DELETE FROM",
        table: table,
        condition: "WHERE id = $1",
        params: [id],
      };
      const data = await updateData(query);
      res.send("Xóa thành công!");
    }
  },

  fetchPostsByCategory: async (req, res) => {
    const query = {
      action: "SELECT * FROM",
      table: "POST",
      locales: ["", "_en"],
      condition: "WHERE type=$1",
      params: [req.params.category],
    };
    const data = await fetchLocalizationData(query);
    var refinedData = data;
    /*Object.keys(data).forEach(async key => {
            refinedData[key] = await Promise.all(
                data[key].map(async mapData => (Object.assign(mapData, { "thumbnail": getPostImage(mapData.detail) }))),
            )
        })*/
    res.send(data);
  },

  fetchNews: async (req, res) => {
    const postNum = req.query.startFrom === undefined ? 0 : req.query.startFrom;
    const query = {
      action: "SELECT * FROM",
      table: "POST",
      locales: ["", "_en"],
      condition: "WHERE type=$1 ORDER BY date DESC LIMIT 10",
      params: ["news"],
    };
    const data = await fetchLocalizationData(query);
    //This add thumbnail into postData
    var refinedData = data;
    Object.keys(data).forEach(async (key) => {
      refinedData[key] = await Promise.all(
        data[key].map(async (mapData) =>
          Object.assign(mapData, { thumbnail: getPostImage(mapData.detail) })
        )
      );
    });
    res.send(refinedData);
  },

  fetchPostsById: async (req, res) => {
    const postId = req.params.id;
    const query = {
      action: "SELECT * FROM",
      table: "POST",
      locales: ["", "_en"],
      condition: "WHERE id=$1",
      params: [postId],
    };
    const data = await fetchLocalizationData(query);
    res.send(data);
  },

  fetchLecturers: async (req, res) => {
    const query = {
      action: "SELECT * FROM",
      table: "LECTURER",
      locales: ["", "_en"],
      condition: "ORDER BY id ASC",
      params: [],
    };
    const data = await fetchLocalizationData(query);
    data.vi = await sortLecturer(data.vi);
    data.en = await sortLecturer(data.en);
    res.send(data);
  },

  fetchLecturersById: async (req, res) => {
    const id = req.params.id;
    const query = {
      action: "SELECT * FROM",
      table: "lecturer",
      locales: ["", "_en"],
      condition: "WHERE id=$1",
      params: [id],
    };
    const data = await fetchLocalizationData(query);
    res.send(data);
  },

  insertLecturer: async (req, res) => {
    const lecturer = req.body;
    const viParams = [
      lecturer.id,
      lecturer.name,
      lecturer.picture,
      lecturer.address,
      lecturer.position,
      lecturer.academic_title,
      lecturer.email,
      lecturer.description,
    ];

    const enParams = [
      lecturer.id,
      removeVietnameseTones(lecturer.name),
      lecturer.picture,
      removeVietnameseTones(lecturer.address),
      lecturer.position_en,
      lecturer.academic_title_en,
      lecturer.email,
      lecturer.description_en,
    ];

    const query = {
      action: "INSERT INTO",
      table: "LECTURER",
      locales: ["", "_en"],
      condition:
        "(id, name, picture, address, position, academic_title, email, description)" +
        " VALUES($1, $2, $3, $4, $5, $6, $7, $8)",
      params: { "": viParams, _en: enParams },
    };
    const data = await insertLocalizationData(query);
    res.send("Thêm thành công!");
  },

  patchLecturer: async (req, res) => {
    const lecturer = req.body;
    const viParams = [
      lecturer.id,
      lecturer.name,
      lecturer.picture,
      lecturer.address,
      lecturer.position,
      lecturer.academic_title,
      lecturer.email,
      lecturer.description,
    ];

    const enParams = [
      lecturer.id,
      removeVietnameseTones(lecturer.name),
      lecturer.picture,
      removeVietnameseTones(lecturer.address),
      lecturer.position_en,
      lecturer.academic_title_en,
      lecturer.email,
      lecturer.description_en,
    ];

    const query = {
      action: "UPDATE",
      table: "LECTURER",
      locales: ["", "_en"],
      condition:
        "SET name = $2, picture = $3, address = $4, position = $5, academic_title = $6, email = $7, description = $8" +
        " WHERE id = $1",
      params: { "": viParams, _en: enParams },
    };
    const data = await insertLocalizationData(query);
    res.send("Sửa thành công!");
  },

  patchPost: async (req, res) => {
    const postData = req.body;
    const postId = postData.id;
    const postType = postData.type;

    const postVi = postData.vi;
    const viParams = [postId, postVi.title, postVi.body];
    const postEn = postData.en;
    const enParams = [postId, postEn.title, postEn.body];

    const query = {
      action: "UPDATE",
      table: "POST",
      locales: ["", "_en"],
      condition: "SET title = $2, detail = $3" + " WHERE id = $1",
      params: { "": viParams, _en: enParams },
    };
    const data = await insertLocalizationData(query);
    res.send("Sửa thành công!");
  },

  insertPost: async (req, res) => {
    const postData = req.body;
    const postType = postData.type;

    const postVi = postData.vi;
    const viParams = [postVi.title, postVi.body, postType];
    const postEn = postData.en;
    const enParams = [postEn.title, postEn.body, postType];

    const query = {
      action: "INSERT INTO",
      table: "POST",
      locales: ["", "_en"],
      condition:
        "(title, detail, type, date)" + " VALUES($1, $2, $3, CURRENT_DATE)",
      params: { "": viParams, _en: enParams },
    };
    //console.log(query);
    const data = await insertLocalizationData(query);
    res.send("Thêm thành công!");
  },

  getSheet: async (req, res) => {
    const sheet = req.params.sheet;
    const name = req.params.name;
    var buf = await fs.readFileSync(
      path.join(__dirname, `../../public/spreadsheet/${sheet}.xlsx`)
    );
    var wb = await XLSX.read(buf, { type: "array", codepage: 1258 });
    var i = 2;
    while (wb.Sheets[name][`A${i}`] instanceof Object) {
      if (wb.Sheets[name][`F${i}`] !== undefined) {
        wb.Sheets[name][`F${i}`].h =
          '<a href="' + wb.Sheets[name][`F${i}`].h + '">Link</a>';
      }
      i++;
    }
    var htmlstr = await XLSX.write(wb, {
      sheet: `${name}`,
      codepage: 1258,
      type: "string",
      bookType: "html",
    });
    console.log();
    res.send(htmlstr);
  },    
};
